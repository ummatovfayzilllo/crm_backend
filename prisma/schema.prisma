generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleStafs {
  ADMIN
  TEACHER
  ASISTANT
  STUDENT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  CANCEL
}

model Rom {
  id        String  @id @default(uuid())
  name      String
  romNumber Int
  pleaces   Int
  isOpen    Boolean @default(true)
  isDeleted Boolean @default(false)

  Group     Group[]
}

model Course {
  id            String  @id @default(uuid())
  name          String
  price         Int
  published     Boolean @default(false)
  durationMont  Int     @default(3)
  weekDays      Int[]   @default([1, 3, 5])
  durationMinut Int
  image         String?
  isDeleted     Boolean @default(false)

  groupes Group[]

  @@map("courses")
}

model Group {
  id        String  @id @default(uuid())
  name      String

  teacherId String
  courseId  String
  romId     String

  inActive  Boolean
  isEnd     Boolean @default(false)
  isStart   Boolean @default(false)
  startDate DateTime
  isDeleted Boolean @default(false)

  teacher      Staff          @relation(fields: [teacherId], references: [id])
  course       Course         @relation(fields: [courseId], references: [id])
  students     StudentGroup[]
  Lesson       Lesson[]
  GroupPayment GroupPayment[]
  rom          Rom            @relation(fields: [romId], references: [id])

  @@map("groupes")
}

model Staff {
  id        String  @id @default(uuid())
  userId    String
  role      RoleStafs @default(STUDENT)
  isDeleted Boolean   @default(false)

  groupes         Group[]
  studentGroup    StudentGroup[]
  Lesson          Lesson[]
  Attendentionals Attendentional[]
  GroupPayment    GroupPayment[]
  user            User             @relation(fields: [userId], references: [id])

  @@map("staffs")
}

model User {
  id        String  @id @default(uuid())
  email     String
  phone     String?
  password  String
  firstName String
  lastName  String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  birthDay  DateTime
  father    String?
  image     String?

  Staff Staff[]
}

model StudentGroup {
  id        String @id @default(uuid())
  studentId String
  groupId   String
  isDeleted Boolean @default(false)

  student Staff @relation(fields: [studentId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@map("student_group")
}

model Lesson {
  id        String @id @default(uuid())
  groupId   String
  teacherId String
  lessonNumber Int
  startDate DateTime
  endDate   DateTime
  isDeleted Boolean @default(false)

  teacher         Staff            @relation(fields: [teacherId], references: [id])
  group           Group            @relation(fields: [groupId], references: [id])
  Attendentionals Attendentional[]

  @@map("lessons")
}

model Attendentional {
  id          String    @id @default(uuid())
  lessonId    String
  studentId   String
  kelganVaqti DateTime?
  kelgan      Boolean   @default(false)
  isDeleted   Boolean   @default(false)

  lesson  Lesson @relation(fields: [lessonId], references: [id])
  student Staff  @relation(fields: [studentId], references: [id])

  @@map("attendentionals")
}

model GroupPayment {
  id           String        @id @default(uuid())
  amount       Int
  status       PaymentStatus @default(PENDING)
  paymentMonth Int
  paymentDate  DateTime
  studentId    String
  groupId      String
  isDeleted    Boolean @default(false)

  student Staff @relation(fields: [studentId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@map("group_payments")
}
